using System.Text;
using System.Text.Json;
using TubeMiniApp.API.Models;

namespace TubeMiniApp.API.Services;

/// <summary>
/// –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram Bot API
/// </summary>
public interface ITelegramNotificationService
{
    Task SendOrderConfirmationAsync(Order order);
    Task SendMessageAsync(long chatId, string message);
}

public class TelegramNotificationService : ITelegramNotificationService
{
    private readonly HttpClient _httpClient;
    private readonly IConfiguration _configuration;
    private readonly ILogger<TelegramNotificationService> _logger;

    public TelegramNotificationService(
        HttpClient httpClient, 
        IConfiguration configuration,
        ILogger<TelegramNotificationService> logger)
    {
        _httpClient = httpClient;
        _configuration = configuration;
        _logger = logger;
    }

    public async Task SendOrderConfirmationAsync(Order order)
    {
        try
        {
            var botToken = _configuration["Telegram:BotToken"];
            if (string.IsNullOrEmpty(botToken))
            {
                _logger.LogWarning("Telegram Bot Token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
                return;
            }

            var message = FormatOrderMessage(order);
            await SendMessageAsync(order.TelegramUserId, message);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ {order.OrderNumber}");
        }
    }

    public async Task SendMessageAsync(long chatId, string message)
    {
        try
        {
            var botToken = _configuration["Telegram:BotToken"];
            if (string.IsNullOrEmpty(botToken))
            {
                _logger.LogWarning("Telegram Bot Token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
                return;
            }

            var url = $"https://api.telegram.org/bot{botToken}/sendMessage";

            var payload = new
            {
                chat_id = chatId,
                text = message,
                parse_mode = "HTML"
            };

            var jsonContent = JsonSerializer.Serialize(payload);
            var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");

            var response = await _httpClient.PostAsync(url, content);

            if (response.IsSuccessStatusCode)
            {
                _logger.LogInformation($"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chatId}");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                _logger.LogError($"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chatId}: {response.StatusCode} - {errorContent}");
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chatId}");
        }
    }

    private string FormatOrderMessage(Order order)
    {
        var sb = new StringBuilder();
        
        sb.AppendLine("üéâ <b>–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>");
        sb.AppendLine();
        sb.AppendLine($"üìã <b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> {order.OrderNumber}");
        sb.AppendLine($"üìÖ <b>–î–∞—Ç–∞:</b> {order.CreatedAt:dd.MM.yyyy HH:mm}");
        sb.AppendLine($"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {order.CustomerName}");
        sb.AppendLine($"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {order.CustomerPhone}");
        
        if (!string.IsNullOrEmpty(order.CustomerEmail))
            sb.AppendLine($"üìß <b>Email:</b> {order.CustomerEmail}");
        
        if (!string.IsNullOrEmpty(order.INN))
            sb.AppendLine($"üè¢ <b>–ò–ù–ù:</b> {order.INN}");
            
        if (!string.IsNullOrEmpty(order.DeliveryAddress))
            sb.AppendLine($"üöö <b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {order.DeliveryAddress}");
        
        sb.AppendLine();
        sb.AppendLine("üì¶ <b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>");
        
        foreach (var item in order.Items)
        {
            sb.AppendLine($"‚Ä¢ {item.Product?.ProductType ?? "–¢–æ–≤–∞—Ä"} ({item.Product?.Diameter ?? 0}–º–º)");
            
            if (item.QuantityMeters > 0)
                sb.AppendLine($"  ‚îî {item.QuantityMeters:F1} –º");
            
            if (item.QuantityTons > 0)
                sb.AppendLine($"  ‚îî {item.QuantityTons:F2} —Ç");
                
            sb.AppendLine($"  ‚îî {item.TotalPrice:C0}");
        }
        
        sb.AppendLine();
        
        if (order.TotalDiscount > 0)
        {
            sb.AppendLine($"üí∞ <b>–°–∫–∏–¥–∫–∞:</b> {order.TotalDiscount:C0}");
        }
        
        sb.AppendLine($"üí≥ <b>–ò—Ç–æ–≥–æ:</b> {order.TotalAmount:C0}");
        
        if (!string.IsNullOrEmpty(order.Comment))
        {
            sb.AppendLine();
            sb.AppendLine($"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {order.Comment}");
        }
        
        sb.AppendLine();
        sb.AppendLine("üìû –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞.");
        sb.AppendLine("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑! üôè");

        return sb.ToString();
    }
}